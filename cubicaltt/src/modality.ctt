module modality where
import proto
import path

Modality : U
 = (isModal : U -> U)
 * (isPropIsModal : (A : U) -> isProp (isModal A))
 * (modality: U -> U)
 * (modalityIsModal : (A : U) -> isModal (modality A))
 * (eta: (A : U) -> A -> modality A)
 * (elim: (A : U) (B : modality A -> U)
     (BModal : (x : modality A) -> isModal (B x))
     (f: (x : A) -> (B (eta A x))) -> ((x : modality A) -> B x))
 * (elimBeta : (A : U) (B : modality A -> U)
     (BModal : (x : modality A) -> isModal (B x))
     (f : (x : A) -> (B (eta A x)))
     (a : A) -> Path (B (eta A a)) (elim A B BModal f (eta A a)) (f a))
 * (isModal: (A : U) (x y : modality A) -> isModal (Path (modality A) x y))
 * unit

-- MODALITIES IN HOMOTOPY TYPE THEORY
-- Egbert Rijke, Michael Shulman, Bas Spitters
-- https://arxiv.org/pdf/1706.07526v4.pdf
